#include <iostream>
#include <map>
#include <string>
#include <iterator>

#include <vector>

using namespace std;
typedef vector <string> rule;
typedef vector <rule> rule_collection;
typedef map<string, rule_collection> grammer;

vector <string> split (string s){
    vector <string> ret;
    int i = 0;
    while (i != s.size()){
        while (i != s.size() && isspace(s[i])){
            ++i;
        }
        int j = i;
        
        while (j != s.size() && !isspace(s[j])){
            ++j;
        }
        if (i != j)
        {
            ret.push_back(s.substr(i, j - i));
        }
        i = j;
    }
    return ret;
    
}



int main() 
{
    vector <string> ret = split ("split this for me");
   
    map <string, vector <vector <string> > > some;
    some[ret[0]];
    
    
    for (map <string, vector <vector <string> > > ::  iterator it = some.begin(); it != some.end(); ++it){
        
        cout << it -> first;
        
        
    }
    
    
    
    
    return 0;
    
